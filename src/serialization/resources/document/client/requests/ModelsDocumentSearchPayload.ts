/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../..";
import * as Zep from "../../../../../api";
import * as core from "../../../../../core";
import { ModelsSearchType } from "../../../../types/ModelsSearchType";

export const ModelsDocumentSearchPayload: core.serialization.Schema<
    serializers.ModelsDocumentSearchPayload.Raw,
    Omit<Zep.ModelsDocumentSearchPayload, "limit">
> = core.serialization.object({
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    minScore: core.serialization.property("min_score", core.serialization.number().optional()),
    mmrLambda: core.serialization.property("mmr_lambda", core.serialization.number().optional()),
    searchType: core.serialization.property("search_type", ModelsSearchType.optional()),
    text: core.serialization.string().optional(),
});

export declare namespace ModelsDocumentSearchPayload {
    interface Raw {
        metadata?: Record<string, unknown> | null;
        min_score?: number | null;
        mmr_lambda?: number | null;
        search_type?: ModelsSearchType.Raw | null;
        text?: string | null;
    }
}
